@page
@model FAL.FrontEnd.Pages.Dashboard.MainModel
@{
}
<form asp-controller="YourController" asp-action="YourAction" method="get" style="margin: 20px; font-family: Arial, sans-serif;">
    <label for="yearSelect" style="font-weight: bold; font-size: 16px; margin-right: 10px;">Select Year:</label>
    <select id="yearSelect" name="year" onchange="this.form.submit()" style="padding: 8px 12px; font-size: 16px; border: 1px solid #ccc; border-radius: 5px; background-color: #f5f5f5; cursor: pointer;">
        @foreach (var year in Model.Years)
        {
            @if (year == Model.CurrentYear)
            {
                <option value="@year" selected="selected">@year</option>
            }
            else
            {
                <option value="@year">@year</option>
            }
        }
    </select>
</form>

<div class="dashboard-container">
    <h1 class="dashboard-title">Detection Dashboard</h1>
    <div class="dashboard-grid">
        <div class="dashboard-card">
            <a asp-page="/Dashboard/Detect" class="dashboard-card-icon-link">
                <i class="fas fa-search dashboard-card-icon"></i>
            </a>
            <h2 id="total-detects" class="dashboard-card-title">@Model.TotalDetect</h2>
            <p class="dashboard-card-subtitle">Total Detection Requests</p>
            <div class="dashboard-chart-container">
                <canvas id="barChart"></canvas>
            </div>
            <div class="dashboard-table-container">
                <!-- Thêm tiêu đề cho bảng -->
                <h3 class="dashboard-table-title">The 5 latest data about detect media</h3>
                <table class="dashboard-table">
                    <thead>
                        <tr>
                            <th>File Name</th>
                            <th>System Name</th>
                            <th>Create Date</th>
                        </tr>
                    </thead>
                    <tbody id="detects-requests-body">
                        @if (Model.DetectStats?.LatestRows != null && Model.DetectStats.LatestRows.Any())
                        {
                            @foreach (var row in Model.DetectStats.LatestRows)
                            {
                                <tr>
                                    <td>@row.FileName</td>
                                    <td>@row.SystemName</td>
                                    <td>@row.CreateDate.ToString("yyyy-MM-dd HH:mm:ss")</td>
                                </tr>
                            }
                        }
                        else
                        {
                            <tr>
                                <td colspan="3">No data available</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
        <div class="dashboard-card">
            <a asp-page="/Dashboard/Train" class="dashboard-card-icon-link">
                <i class="fas fa-search dashboard-card-icon"></i>
            </a>
            <h2 id="total-trained" class="dashboard-card-title">@Model.TotalTrain</h2>
            <p class="dashboard-card-subtitle">Total People Trained</p>
            <div class="dashboard-chart-container">
                <canvas id="lineChart"></canvas>
            </div>
            <div class="dashboard-table-container">
                <h3 class="dashboard-table-title">The 5 latest data about train people</h3>

                <table class="dashboard-table">
                    <thead>
                        <tr>
                            <th>UserId</th>
                            <th>FaceId</th>
                            <th>Create Date</th>
                        </tr>
                    </thead>
                    <tbody id="detects-requests-body">
                        @if (Model.TrainStats?.LatestRows != null && Model.TrainStats.LatestRows.Any())
                        {
                            @foreach (var row in Model.TrainStats.LatestRows)
                            {
                                <tr>
                                    <td>@row.UserId</td>
                                    <td>@row.FaceId</td>
                                    <td>@row.CreateDate.ToString("yyyy-MM-dd HH:mm:ss")</td>
                                </tr>
                            }
                        }
                        else
                        {
                            <tr>
                                <td colspan="3">No data available</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
        <div class="dashboard-card">
            <a asp-page="/Dashboard/Request" class="dashboard-card-icon-link">
                <i class="fas fa-search dashboard-card-icon"></i>
            </a>
            <h2 id="total-requests" class="dashboard-card-title">@Model.TotalRequest</h2>
            <p class="dashboard-card-subtitle">Total Requests</p>
            <div class="dashboard-chart-container">
                <canvas id="pieChart"></canvas>
            </div>
        </div>
        <div class="dashboard-card">
            <h2 id="total-detects" class="dashboard-card-title">@Model.TotalCollection</h2>
            <p class="dashboard-card-subtitle">Total Collection Information</p>
            <div class="dashboard-chart-container">
                <canvas id="barChart1"></canvas>
            </div>
        </div>
    </div>
</div>
<script>
    document.addEventListener("DOMContentLoaded", function () {
        // Bar Chart for Total Detection Requests
        const barCtx = document.getElementById('barChart')?.getContext('2d');
        if (!barCtx) {
            console.error("Không tìm thấy phần tử 'barChart'.");
        }

        const monthCounts = @Html.Raw(Json.Serialize(Model.DetectStats.MonthCounts));

        // Kiểm tra dữ liệu
        if (!monthCounts || typeof monthCounts !== 'object') {
            console.error("Dữ liệu monthCounts không hợp lệ:", monthCounts);
        } else {
            // Chuyển đổi dữ liệu thành mảng
            const monthData = Object.values(monthCounts);
            const maxValue = Math.max(...monthData);

            // Tô màu cột
            const backgroundColors = monthData.map(value =>
                value === maxValue ? 'rgba(255, 0, 0, 0.7)' : 'rgba(0, 123, 255, 0.7)'
            );

            // Tạo biểu đồ
            const barChart = new Chart(barCtx, {
                type: 'bar',
                data: {
                    labels: ['January', 'February', 'March', 'April', 'May', 'June',
                        'July', 'August', 'September', 'October', 'November', 'December'],
                    datasets: [{
                        label: 'Detection Requests',
                        data: monthData,  // Bind dữ liệu
                        backgroundColor: backgroundColors,  // Tô màu tùy theo giá trị
                        borderColor: 'rgba(0, 123, 255, 1)',
                        borderWidth: 1
                    }]
                },
                options: {
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    },
                    plugins: {
                        title: {
                            display: true,
                            text: 'Monthly Detection Requests',
                            position: 'bottom',  // Đưa tiêu đề xuống dưới
                            font: {
                                size: 16,  // Tăng kích thước chữ nếu cần
                                weight: 'bold'
                            },
                            color: '#333'  // Màu chữ tiêu đề
                        }
                    },
                    animation: {
                        duration: 2000,  // Animation khi hiển thị
                        easing: 'easeInOutBounce'
                    }
                }
            });
        }


        // Line Chart for Total People Trained
        const lineCtx = document.getElementById('lineChart').getContext('2d');
        const monthCountTrains = @Html.Raw(Json.Serialize(Model.TrainStats.MonthCounts));

        const lineChart = new Chart(lineCtx, {
            type: 'line',
            data: {
                datasets: [{
                    label: 'People Trained',
                    data: monthCountTrains,
                    backgroundColor: 'rgba(40, 167, 69, 0.3)',
                    borderColor: 'rgba(40, 167, 69, 1)',
                    borderWidth: 2,
                    fill: true
                }]
            },
            options: {
                scales: {
                    y: {
                        beginAtZero: true
                    }
                },
                plugins: {
                    title: {
                        display: true,
                        text: 'Monthly Train Requests',
                        position: 'bottom',  // Đưa tiêu đề xuống dưới
                        font: {
                            size: 16,  // Tăng kích thước chữ nếu cần
                            weight: 'bold'
                        },
                        color: '#333'  // Màu chữ tiêu đề
                    }
                },
                animation: {
                    duration: 2000,  // Animation khi hiển thị
                    easing: 'easeInOutBounce'
                }
            }
        });

        // Pie Chart for Total Requests Status
        const pieCtx = document.getElementById('pieChart').getContext('2d');
        const requestStats = @Html.Raw(Json.Serialize(Model.RequestStats));
        const pieChart = new Chart(pieCtx, {
            type: 'pie',
            data: {
                labels: ['Train', 'Detect', 'Compare'],
                datasets: [{
                    label: 'Request Stats',
                    data: [requestStats.train, requestStats.detect, requestStats.compare],
                    backgroundColor: [
                        'rgba(0, 123, 255, 0.7)',  // Train
                        'rgba(255, 193, 7, 0.7)',  // Detect
                        'rgba(220, 53, 69, 0.7)'   // Compare
                    ],
                    borderColor: [
                        'rgba(0, 123, 255, 1)',
                        'rgba(255, 193, 7, 1)',
                        'rgba(220, 53, 69, 1)'
                    ],
                    borderWidth: 1
                }]
            },
            options: {
                responsive: true,
                plugins: {
                    title: {
                        display: true,
                        text: 'Request Statistics Overview'
                    }
                }
            }
        });




        // Bar Chart for Total Detection Requests
        const barCtx1 = document.getElementById('barChart1')?.getContext('2d');
        if (!barCtx1) {
            console.error("Không tìm thấy phần tử 'barChart1'.");
        }

        const monthCounts1 = @Html.Raw(Json.Serialize(Model.CollectionChartStats));

        // Kiểm tra dữ liệu
        if (!monthCounts1 || typeof monthCounts1 !== 'object') {
            console.error("Dữ liệu monthCounts không hợp lệ:", monthCounts1);
        } else {
            // Tạo biểu đồ
            const barChart1 = new Chart(barCtx1, {
                type: 'bar',
                data: {
                    datasets: [{
                        label: 'Collection Infor',
                        data: monthCounts1,  // Bind dữ liệu
                        backgroundColor: 'rgba(0, 123, 255, 1)',  // Tô màu tùy theo giá trị
                        borderColor: 'rgba(0, 123, 255, 1)',
                        borderWidth: 1
                    }]
                },
                options: {
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    },
                    plugins: {
                        title: {
                            display: true,
                            text: 'Collection Information',
                            position: 'bottom', 
                            font: {
                                size: 16,
                                weight: 'bold'
                            },
                            color: '#333'  
                        }
                    },
                    animation: {
                        duration: 2000, 
                        easing: 'easeInOutBounce'
                    }
                }
            });
        }
    });
</script>
